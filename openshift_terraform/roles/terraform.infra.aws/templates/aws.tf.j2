#----------------------------------------------
# API Keys
#----------------------------------------------
provider "aws" {
    access_key              = "{{ aws_access_key_id }}"
    secret_key              = "{{ aws_secret_access_key }}"
    region                  = "{{ aws_route53_region }}"
}

#----------------------------------------------
# VPC
#----------------------------------------------
resource "aws_vpc" "main" {
  cidr_block                = "{{ aws_vpc_cidr_block }}"
  enable_dns_support        = "{{ aws_vpc_enable_dns_support }}"
  enable_dns_hostnames      = "{{ aws_vpc_enable_dns_hostnames }}"
  tags {
    Name                    = "{{ aws_vpc_tag_name }}"
  }
}

#----------------------------------------------
# Subnet
#----------------------------------------------
resource "aws_subnet" "public" {
    vpc_id                  = "${aws_vpc.main.id}"
    cidr_block              = "{{ aws_subnet_cidr_block }}"
    map_public_ip_on_launch = "{{ aws_subnet_map_public_ip_on_launch }}"
    tags {
      Name                  = "{{ aws_subnet_tag_name }}"
    }
}

#----------------------------------------------
# Gateway
#----------------------------------------------
resource "aws_internet_gateway" "public" {
  vpc_id                    = "${aws_vpc.main.id}"
}

#----------------------------------------------
# Route
#----------------------------------------------
resource "aws_route_table" "public" {
  vpc_id = "${aws_vpc.main.id}"
  route {
      cidr_block            = "{{ aws_route_table_cidr_block }}"
      gateway_id            = "${aws_internet_gateway.public.id}"
  }
  tags {
    Name                    = "{{ aws_route_table_tag_name }}"
  }
}

resource "aws_route_table_association" "public" {
  subnet_id                 = "${aws_subnet.public.id}"
  route_table_id            = "${aws_route_table.public.id}"
}

#----------------------------------------------
# Security Group
#----------------------------------------------
resource "aws_security_group" "{{ aws_security_group_name }}" {
  name                      = "{{ aws_security_group_name }}"
  vpc_id                    = "${aws_vpc.main.id}"
  egress {
    protocol                = -1
    from_port               = 0
    to_port                 = 0
    cidr_blocks             = ["0.0.0.0/0"]
  }
  ingress {
    protocol                = -1
    from_port               = 0
    to_port                 = 0
    cidr_blocks             = ["0.0.0.0/0"]
  }
}

# [TODO]: Implement dynamic inventory file.

#----------------------------------------------
# DNS
#----------------------------------------------
resource "aws_route53_record" "{{ ec2_master_tag_name }}" {
  zone_id                   = "{{ aws_route53_zone_id }}"
  name                      = "master.{{ default_subdomain }}"
  type                      = "A"
  ttl                       = "600"
  records                   = ["${aws_instance.{{ ec2_master_group_name }}.public_ip}"]
}

resource "aws_route53_record" "{{ ec2_node_tag_name }}" {
  count                     = "{{ ec2_node_count }}"
  zone_id                   = "{{ aws_route53_zone_id }}"
  name                      = "node.${count.index}.{{ default_subdomain }}"
  type                      = "A"
  ttl                       = "300"
  records                   = ["${element(aws_instance.{{ ec2_node_group_name }}.*.public_ip, count.index)}"]
}

resource "aws_route53_record" "wildcard" {
  zone_id                   = "{{ aws_route53_zone_id }}"
  type                      = "A"
  ttl                       = "600"
  name                      = "*.{{ default_wildcard }}"
  records                   = ["${aws_instance.{{ ec2_master_group_name }}.public_ip}"]
}

#----------------------------------------------
# Cloud-init configuration
#----------------------------------------------
# Template for initial configuration bash script
data "template_file" "init" {
    template                = "${file("init.tpl")}"
}

#----------------------------------------------
# AMI
#----------------------------------------------
resource "aws_instance" "{{ ec2_master_group_name }}" {
    ami                     = "{{ ec2_master_image }}"
    instance_type           = "{{ ec2_master_instance_type }}"
    user_data               = "${data.template_file.init.rendered}"
    subnet_id               = "${aws_subnet.public.id}"
    key_name                = "{{ default_keypair }}"
    security_groups         = [ "${aws_security_group.{{ aws_security_group_name }}.id}" ]
    root_block_device {
      volume_size           = "{{ os_master_root_vol_size }}"
		  volume_type           = "{{ os_master_root_vol_type }}"
	  }
    ebs_block_device {
      device_name           = "{{ os_docker_block_device }}"
      volume_size           = "{{ os_docker_vol_size }}"
      volume_type           = "{{ os_docker_vol_type }}"
    }
    tags {
        Name                = "{{ ec2_master_tag_name }}"
        sshUser             = "{{ default_user }}"
        role                = "{{ ec2_master_tag_role }}"
    }
    provisioner "file" {
      source                = "{{ terraform_workspace }}/{{ default_keypair }}"
      destination           = "{{ default_ssh }}/{{ default_keypair }}"
      connection {
        type                = "{{ terraform_provisioner_connection_type }}"
        user                = "{{ default_user }}"
        private_key         = "${file("{{ terraform_workspace }}/{{ default_keypair }}")}"
      }
    }
}

resource "aws_instance" "{{ ec2_node_group_name }}" {
    count                   = "{{ ec2_node_count }}"
    ami                     = "{{ ec2_node_image }}"
    instance_type           = "{{ ec2_node_instance_type }}"
    user_data               = "${data.template_file.init.rendered}"
    subnet_id               = "${aws_subnet.public.id}"
    key_name                = "{{ default_keypair }}"
    security_groups         = [ "${aws_security_group.{{ aws_security_group_name }}.id}" ]
	  root_block_device {
      volume_size           = "{{ os_node_root_vol_size }}"
		  volume_type           = "{{ os_node_root_vol_type }}"
	  }
    ebs_block_device {
      device_name           = "{{ os_docker_block_device }}"
      volume_size           = "{{ os_docker_vol_size }}"
      volume_type           = "{{ os_docker_vol_type }}"
    }
    tags {
        Name                = "{{ ec2_node_tag_name }}-${count.index}"
        sshUser             = "{{ default_user }}"
        role                = "{{ ec2_node_tag_role }}"
    }
    provisioner "file" {
        source              = "{{ terraform_workspace }}/{{ default_keypair }}"
        destination         = "{{ default_ssh }}/{{ default_keypair }}"
        connection {
          type              = "{{ terraform_provisioner_connection_type }}"
          user              = "{{ default_user }}"
          private_key       = "${file("{{ terraform_workspace }}/{{ default_keypair }}")}"
        }
    }
}
