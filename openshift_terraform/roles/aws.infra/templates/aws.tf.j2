# LAUNCH TOWER IN AMAZON EC2 (Public Tower Image)
# ------------------------------------------------
# EC2 Region  Location      AMI TYPE  AMI ID    
# us-east-1   N. Virginia   PV        ami-a86614bf
# us-west-1   N. California PV        ami-cdd79aad
# us-west-2   Oregon        PV        ami-028f5e62

#----------------------------------------------
# Variables
#----------------------------------------------
variable "aws_access_key" { default = "{{ aws_access_key_id }}" }
variable "aws_secret_key" { default = "{{ aws_secret_access_key }}" }
variable "security_group" { default = "{{ default_subdomain }}-openshift-sg" }
variable "keypair" { default = "{{ default_subdomain }}-openshift" }
variable "aws_region" { default = "{{ region }}" }
variable "ebs_root_block_size" { default = "50" }
variable "number_nodes" { default = "{{ number_nodes }}" }
#----------------------------------------------
# API Keys
#----------------------------------------------
provider "aws" {
    access_key = "${var.aws_access_key}"
    secret_key = "${var.aws_secret_key}"
    region     = "${var.aws_region}"
}
#----------------------------------------------
# VPC
#----------------------------------------------
# Main VPC that will contain everything.
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
 
  tags { 
    Name = "{{ default_subdomain }}-openshift-vpc" 
  }
}
output "aws_vpc main" {
  value = "Completed {{ default_subdomain }}-openshift-vpc"
}

# The public subnet is where resources connected to the internet will go
resource "aws_subnet" "public" {
    vpc_id                  = "${aws_vpc.main.id}"
    cidr_block              = "10.0.2.0/24"
    map_public_ip_on_launch = true
    tags { Name = "{{ default_subdomain }}-openshift-public-subnet" }
}
output "aws_subnet public" {
  value = "Completed {{ default_subdomain }}-openshift-public-subnet"
}

# Internet accessible route table + gateway for the public subnet
resource "aws_internet_gateway" "public" {
  vpc_id = "${aws_vpc.main.id}"
  tags { Name = "{{ default_subdomain }}-openshift-igw" }
}
output "aws_internet_gateway public" {
  value = "Completed {{ default_subdomain }}-openshift-igw"
}

resource "aws_route_table" "public" {
  vpc_id = "${aws_vpc.main.id}"
  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.public.id}"
  }
  tags { Name = "{{ default_subdomain }}-openshift-public-rt" }
}
output "aws_route_table public" {
  value = "Completed {{ default_subdomain }}-openshift-public-rt"
}

resource "aws_route_table_association" "public" {
  subnet_id      = "${aws_subnet.public.id}"
  route_table_id = "${aws_route_table.public.id}"
}
output "aws_route_table_association public" {
  value = "Completed association of ${aws_subnet.public.id} to ${aws_route_table.public.id}"
}

#----------------------------------------------
# Security Group
#----------------------------------------------
resource "aws_security_group" "{{ aws_security_group_name }}" {
  name   = "{{ aws_security_group_name }}"
  vpc_id = "${aws_vpc.main.id}"

  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

#  ingress {
#    protocol    = "tcp"
#    from_port   = 443
#    to_port     = 443
#    cidr_blocks = ["0.0.0.0/0"]
#  }
}

output "aws_security_group {{ aws_security_group_name }}" {
  value = "Completed security group {{ aws_security_group_name }}"
}

#----------------------------------------------
# DNS
#----------------------------------------------
resource "aws_route53_record" "{{ ec2_master_tag_name }}" {
  zone_id                   = "{{ aws_route53_zone_id }}"
  name                      = "master.{{ default_subdomain }}"
  type                      = "A"
  ttl                       = "600"
  records                   = ["${aws_eip.{{ ec2_master_group_name }}.public_ip}"]
}

resource "aws_route53_record" "{{ ec2_node_tag_name }}" {
  count                     = "{{ number_nodes }}"
  zone_id                   = "{{ aws_route53_zone_id }}"
  name                      = "node.${count.index}.{{ default_subdomain }}"
  type                      = "A"
  ttl                       = "300"
  records                   = ["${element(aws_eip.{{ ec2_node_group_name }}.*.public_ip, count.index)}"]
}

resource "aws_route53_record" "wildcard" {
  zone_id                   = "{{ aws_route53_zone_id }}"
  type                      = "A"
  ttl                       = "600"
  name                      = "*.{{ default_wildcard }}"
  records                   = ["${aws_eip.{{ ec2_master_group_name }}.public_ip}"]
}

output "aws_route53_record" {
  value = "Completed {{ default_subdomain }}-aws_route53_records"
}

#----------------------------------------------
# Cloud-init configuration
#----------------------------------------------
# Template for initial configuration bash script
data "template_file" "init" {
    template                = "${file("init.tpl")}"
}

#----------------------------------------------
# AMI
#----------------------------------------------
resource "aws_instance" "{{ ec2_master_group_name }}" {
    ami                     = "{{ ec2_master_image }}"
    instance_type           = "{{ ec2_master_instance_type }}"
    user_data               = "${data.template_file.init.rendered}"
    subnet_id               = "${aws_subnet.public.id}"
    key_name                = "{{ default_keypair }}"
    security_groups         = [ "${aws_security_group.{{ aws_security_group_name }}.id}" ]
    root_block_device {
      volume_size           = "{{ os_master_root_vol_size }}"
      volume_type           = "{{ os_master_root_vol_type }}"
    }
    ebs_block_device {
      device_name           = "{{ os_docker_block_device }}"
      volume_size           = "{{ os_docker_vol_size }}"
      volume_type           = "{{ os_docker_vol_type }}"
    }
    tags {
      Name                = "{{ ec2_master_tag_name }}"
      sshUser             = "{{ default_user }}"
      role                = "{{ ec2_master_tag_role }}"
      "kubernetes.io/cluster/{{ openshift_cluster_name }}" = "{{ openshift_cluster_id }}"
    }
    volume_tags {
      "kubernetes.io/cluster/{{ openshift_cluster_name }}" = "{{ openshift_cluster_id }}"
    }
    provisioner "file" {
      source                = "{{ terraform_working_dir }}/{{ default_keypair }}"
      destination           = "{{ default_ssh }}/{{ default_keypair }}"
      connection {
        type                = "{{ terraform_provisioner_connection_type }}"
        user                = "{{ default_user }}"
        private_key         = "${file("{{ terraform_working_dir }}/{{ default_keypair }}")}"
      }
    }
}

resource "aws_eip" "ose-master" {
  instance = "${aws_instance.ose-master.id}"
}

output "aws_instance master_eip" {
  value = "Completed {{ default_subdomain }}-master-eip"
}

resource "aws_instance" "{{ ec2_node_group_name }}" {
    count                   = "{{ number_nodes }}"
    ami                     = "{{ ec2_node_image }}"
    instance_type           = "{{ ec2_node_instance_type }}"
    user_data               = "${data.template_file.init.rendered}"
    subnet_id               = "${aws_subnet.public.id}"
    key_name                = "{{ default_keypair }}"
    security_groups         = [ "${aws_security_group.{{ aws_security_group_name }}.id}" ]
    root_block_device {
      volume_size           = "{{ os_node_root_vol_size }}"
      volume_type           = "{{ os_node_root_vol_type }}"
    }
    ebs_block_device {
      device_name           = "{{ os_docker_block_device }}"
      volume_size           = "{{ os_docker_vol_size }}"
      volume_type           = "{{ os_docker_vol_type }}"
    }
    tags {
      Name                = "{{ ec2_node_tag_name }}-${count.index}"
      sshUser             = "{{ default_user }}"
      role                = "{{ ec2_node_tag_role }}"
      "kubernetes.io/cluster/{{ openshift_cluster_name }}" = "{{ openshift_cluster_id }}" }
    volume_tags {
      "kubernetes.io/cluster/{{ openshift_cluster_name }}" = "{{ openshift_cluster_id }}"
    }
    provisioner "file" {
      source              = "{{ terraform_working_dir }}/{{ default_keypair }}"
      destination         = "{{ default_ssh }}/{{ default_keypair }}"
      connection {
        type              = "{{ terraform_provisioner_connection_type }}"
        user              = "{{ default_user }}"
        private_key       = "${file("{{ terraform_working_dir }}/{{ default_keypair }}")}"
      }
    }
}

#resource "aws_instance" "node" {
#    count             = "${var.number_nodes}"
#    ami               = "${var.aws_node_ami}"
#    instance_type     = "${var.node_instance_type}"
#    subnet_id         = "${aws_subnet.public.id}"
#    key_name          = "${var.keypair}"
#    security_groups   = [ "${aws_security_group.openshift-sg.id}" ]
#
#	  root_block_device = {
#      volume_type     = "gp2"
#      volume_size     = "${var.ebs_root_block_size}"
#	  }
#    tags {
#        Name     = "{{ default_subdomain }}-${count.index}"
#        Role     = "{{ default_subdomain }}-node"
#        Workshop = "{{ default_subdomain }}"
#        sshUser  = "ec2-user"
#        Index    = "${count.index}"
#
#    }
#}
output "aws_instance node" {
  value = "Completed {{ default_subdomain }}-node"
}

resource "aws_eip" "ose-node" {
 count		= "{{ number_nodes }}"
 instance	= "${element(aws_instance.ose-node.*.id, count.index)}"
}

output "aws_instance node_eip" {
  value = "Completed {{ default_subdomain }}-node-eip"
}
