###############################################
#
#            /////NOTE/////
#
#      This Terraform file dynmicly writes 
#      variables from group_vars/all, or 
#      if using Ansible Vault from the vault 
#      file in group_vars/vault.yml
#
###############################################

#----------------------------------------------
# Variables
#----------------------------------------------
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "security_group"       { default = "{{ workshop_prefix }}-ansible-master-sg" }
variable "keypair"              { default = "{{ workshop_prefix }}-key" }
variable "node_instance_type"   { default = "{{ instance_type }}" }
variable "aws_region"           { default = "{{ aws_region }}" }
variable "ebs_root_block_size"  { default = "{{ ebs_root_block_size }}" }
variable "aws_node_ami"         { default = "{{ ami_id }}" }     
variable "number_master_nodes"  { default = "{{ number_master_nodes }}" }
variable "number_nodes"         { default = "{{ number_nodes }}" }

#----------------------------------------------
# API Keys
#----------------------------------------------
provider "aws" {
    access_key = "${var.aws_access_key}"
    secret_key = "${var.aws_secret_key}"
    region     = "${var.aws_region}"
}

#----------------------------------------------
# VPC
#----------------------------------------------
# Main VPC that will contain everything.
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
 
  tags { 
    Name = "{{ workshop_prefix }}-ansible-master-vpc" 
  }
}

# The public subnet is where resources connected to the internet will go
resource "aws_subnet" "public" {
    vpc_id                  = "${aws_vpc.main.id}"
    cidr_block              = "10.0.2.0/24"
    map_public_ip_on_launch = true
    tags { Name = "{{ workshop_prefix }}-ansible-master-public-subnet" }
}

# Internet accessible route table + gateway for the public subnet
resource "aws_internet_gateway" "public" {
  vpc_id = "${aws_vpc.main.id}"
  tags { Name = "{{ workshop_prefix }}-ansible-master-igw" }
}

resource "aws_route_table" "public" {
  vpc_id = "${aws_vpc.main.id}"
  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.public.id}"
  }
  tags { Name = "{{ workshop_prefix }}-ansible-master-public-rt" }
}

resource "aws_route_table_association" "public" {
  subnet_id      = "${aws_subnet.public.id}"
  route_table_id = "${aws_route_table.public.id}"
}

#----------------------------------------------
# Security Group
#----------------------------------------------
resource "aws_security_group" "ansible-master-sg" {
  name   = "{{ workshop_prefix }}-ansible-master-sg"
  vpc_id = "${aws_vpc.main.id}"

  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 443
    to_port     = 443
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 80
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 8443
    to_port     = 8443
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 22
    to_port     = 22
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 9090
    to_port     = 9090
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 8888
    to_port     = 8888
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 5000
    to_port     = 5000
    cidr_blocks = ["0.0.0.0/0"]
  }
}

#----------------------------------------------
# DNS
#----------------------------------------------
resource "aws_route53_record" "master-nodes" {
  # same number of records as instances
  count = "${var.number_master_nodes}"
  zone_id = "{{ zone_id }}"                       
  name = "{{ workshop_prefix }}.master.${count.index}.{{ domain_name }}"
  type = "A"
  ttl = "300"
  # matches up record N to instance N
  records = ["${element(aws_instance.master.*.public_ip, count.index)}"]
}

resource "aws_route53_record" "nodes" {
  # same number of records as instances
  count = "${var.number_nodes}"
  zone_id = "{{ zone_id }}"                       
  name = "{{ workshop_prefix }}.${count.index}.{{ domain_name }}"
  type = "A"
  ttl = "300"
  # matches up record N to instance N
  records = ["${element(aws_instance.node.*.public_ip, count.index)}"]
}

# OpenShift Wildcard for Apps
resource "aws_route53_record" "wildcard" {
  count = "${var.number_nodes}"
  zone_id = "{{ zone_id }}"
  type = "A"
  ttl = "300"
  name = "*.apps.ose.${count.index}.{{ domain_name }}"
  records = ["${element(aws_instance.node.*.public_ip, count.index)}"]
}

#----------------------------------------------
# AMI : Master Node
#----------------------------------------------
resource "aws_instance" "master" {
    count             = "${var.number_master_nodes}"
    ami               = "${var.aws_node_ami}"
    instance_type     = "${var.node_instance_type}"
    subnet_id         = "${aws_subnet.public.id}"
    key_name          = "${var.keypair}"
    security_groups   = [ "${aws_security_group.ansible-master-sg.id}" ]

    root_block_device = {
      volume_type     = "gp2"
      volume_size     = "${var.ebs_root_block_size}"
    }
    tags {
        Name     = "{{ workshop_prefix }}-master-node-${count.index}"
        Role     = "{{ workshop_prefix }}-master-node"
        Workshop = "{{ workshop_prefix }}"
        sshUser  = "ec2-user"
        Index    = "${count.index}"
    }
}

#----------------------------------------------
# AMI : Student Node
#----------------------------------------------
resource "aws_instance" "node" {
    count             = "${var.number_nodes}"
    ami               = "${var.aws_node_ami}"
    instance_type     = "${var.node_instance_type}"
    subnet_id         = "${aws_subnet.public.id}"
    key_name          = "${var.keypair}"
    security_groups   = [ "${aws_security_group.ansible-master-sg.id}" ]

    root_block_device = {
      volume_type     = "gp2"
      volume_size     = "${var.ebs_root_block_size}"
    }
    tags {
        Name     = "{{ workshop_prefix }}-node-${count.index}"
        Role     = "{{ workshop_prefix }}-node"
        Workshop = "{{ workshop_prefix }}"
        sshUser  = "ec2-user"
        Index    = "${count.index}"
    }
}